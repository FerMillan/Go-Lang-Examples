// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TBLUser is an object representing the database table.
type TBLUser struct {
	ID         int        `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name       string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	Email      string     `boil:"email" json:"email" toml:"email" yaml:"email"`
	Facebookid string     `boil:"facebookid" json:"facebookid" toml:"facebookid" yaml:"facebookid"`
	Password   string     `boil:"password" json:"password" toml:"password" yaml:"password"`
	Mobile     null.Int64 `boil:"mobile" json:"mobile,omitempty" toml:"mobile" yaml:"mobile,omitempty"`
	UserType   int8       `boil:"user_type" json:"user_type" toml:"user_type" yaml:"user_type"`
	RegDate    time.Time  `boil:"reg_date" json:"reg_date" toml:"reg_date" yaml:"reg_date"`
	LoginDate  time.Time  `boil:"login_date" json:"login_date" toml:"login_date" yaml:"login_date"`
	LoginIP    string     `boil:"login_ip" json:"login_ip" toml:"login_ip" yaml:"login_ip"`
	LoginMode  bool       `boil:"login_mode" json:"login_mode" toml:"login_mode" yaml:"login_mode"`
	// 1->Active | 2->Inactive
	Status                     bool         `boil:"status" json:"status" toml:"status" yaml:"status"`
	Membership                 int          `boil:"membership" json:"membership" toml:"membership" yaml:"membership"`
	Televia                    null.String  `boil:"Televia" json:"Televia,omitempty" toml:"Televia" yaml:"Televia,omitempty"`
	PaseUrbano                 null.String  `boil:"PaseUrbano" json:"PaseUrbano,omitempty" toml:"PaseUrbano" yaml:"PaseUrbano,omitempty"`
	Viapass                    null.String  `boil:"Viapass" json:"Viapass,omitempty" toml:"Viapass" yaml:"Viapass,omitempty"`
	AdditionalMultiplier       float64      `boil:"additional_multiplier" json:"additional_multiplier" toml:"additional_multiplier" yaml:"additional_multiplier"`
	AutoTrustScore             float64      `boil:"auto_trust_score" json:"auto_trust_score" toml:"auto_trust_score" yaml:"auto_trust_score"`
	ManualTrustScore           float64      `boil:"manual_trust_score" json:"manual_trust_score" toml:"manual_trust_score" yaml:"manual_trust_score"`
	SocialNetworkScore         null.Float64 `boil:"social_network_score" json:"social_network_score,omitempty" toml:"social_network_score" yaml:"social_network_score,omitempty"`
	OtpRequest                 null.Int     `boil:"otpRequest" json:"otpRequest,omitempty" toml:"otpRequest" yaml:"otpRequest,omitempty"`
	OtpRequestTime             null.Time    `boil:"otpRequestTime" json:"otpRequestTime,omitempty" toml:"otpRequestTime" yaml:"otpRequestTime,omitempty"`
	TrustScore                 null.Float64 `boil:"trust_score" json:"trust_score,omitempty" toml:"trust_score" yaml:"trust_score,omitempty"`
	Prefered                   null.JSON    `boil:"prefered" json:"prefered,omitempty" toml:"prefered" yaml:"prefered,omitempty"`
	Isbouncedemail             null.Int     `boil:"isbouncedemail" json:"isbouncedemail,omitempty" toml:"isbouncedemail" yaml:"isbouncedemail,omitempty"`
	Isbouncedmaxattempts       int          `boil:"isbouncedmaxattempts" json:"isbouncedmaxattempts" toml:"isbouncedmaxattempts" yaml:"isbouncedmaxattempts"`
	AcquisitionSource          null.String  `boil:"acquisition_source" json:"acquisition_source,omitempty" toml:"acquisition_source" yaml:"acquisition_source,omitempty"`
	GCMTKNID                   null.Int     `boil:"gcm_tkn_id" json:"gcm_tkn_id,omitempty" toml:"gcm_tkn_id" yaml:"gcm_tkn_id,omitempty"`
	IsEmailVerified            null.Int8    `boil:"isEmailVerified" json:"isEmailVerified,omitempty" toml:"isEmailVerified" yaml:"isEmailVerified,omitempty"`
	IsPhoneVerified            null.Int8    `boil:"isPhoneVerified" json:"isPhoneVerified,omitempty" toml:"isPhoneVerified" yaml:"isPhoneVerified,omitempty"`
	PDWChanged                 null.Int     `boil:"pdw_changed" json:"pdw_changed,omitempty" toml:"pdw_changed" yaml:"pdw_changed,omitempty"`
	Isvalidemail               null.Int8    `boil:"isvalidemail" json:"isvalidemail,omitempty" toml:"isvalidemail" yaml:"isvalidemail,omitempty"`
	IsCorporate                null.Int     `boil:"is_corporate" json:"is_corporate,omitempty" toml:"is_corporate" yaml:"is_corporate,omitempty"`
	CookieChanged              null.Int     `boil:"cookie_changed" json:"cookie_changed,omitempty" toml:"cookie_changed" yaml:"cookie_changed,omitempty"`
	MastercardMembership       null.Int8    `boil:"mastercard_membership" json:"mastercard_membership,omitempty" toml:"mastercard_membership" yaml:"mastercard_membership,omitempty"`
	MastercardMembershipDate   null.Time    `boil:"mastercard_membership_date" json:"mastercard_membership_date,omitempty" toml:"mastercard_membership_date" yaml:"mastercard_membership_date,omitempty"`
	IsVendor                   null.Int8    `boil:"isVendor" json:"isVendor,omitempty" toml:"isVendor" yaml:"isVendor,omitempty"`
	Commission                 null.Float32 `boil:"commission" json:"commission,omitempty" toml:"commission" yaml:"commission,omitempty"`
	VipDate                    null.Time    `boil:"vip_date" json:"vip_date,omitempty" toml:"vip_date" yaml:"vip_date,omitempty"`
	Attemtps                   null.Int     `boil:"attemtps" json:"attemtps,omitempty" toml:"attemtps" yaml:"attemtps,omitempty"`
	IsReusedPasswordReset      null.Bool    `boil:"isReusedPasswordReset" json:"isReusedPasswordReset,omitempty" toml:"isReusedPasswordReset" yaml:"isReusedPasswordReset,omitempty"`
	MobileCodi                 null.String  `boil:"mobile_codi" json:"mobile_codi,omitempty" toml:"mobile_codi" yaml:"mobile_codi,omitempty"`
	IsMerchant                 null.Int8    `boil:"isMerchant" json:"isMerchant,omitempty" toml:"isMerchant" yaml:"isMerchant,omitempty"`
	TimeLock                   null.Time    `boil:"time_lock" json:"time_lock,omitempty" toml:"time_lock" yaml:"time_lock,omitempty"`
	SuccessRecoveryAttempts    null.Int8    `boil:"successRecoveryAttempts" json:"successRecoveryAttempts,omitempty" toml:"successRecoveryAttempts" yaml:"successRecoveryAttempts,omitempty"`
	IsbouncedemailMethod2      null.String  `boil:"isbouncedemail_method2" json:"isbouncedemail_method2,omitempty" toml:"isbouncedemail_method2" yaml:"isbouncedemail_method2,omitempty"`
	EmailSinDots               null.String  `boil:"emailSinDots" json:"emailSinDots,omitempty" toml:"emailSinDots" yaml:"emailSinDots,omitempty"`
	BouncedSource              null.String  `boil:"bounced_source" json:"bounced_source,omitempty" toml:"bounced_source" yaml:"bounced_source,omitempty"`
	AdditionalWalletMultiplier null.Float64 `boil:"additional_wallet_multiplier" json:"additional_wallet_multiplier,omitempty" toml:"additional_wallet_multiplier" yaml:"additional_wallet_multiplier,omitempty"`
	DeletedAt                  null.Time    `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *tblUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tblUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TBLUserColumns = struct {
	ID                         string
	Name                       string
	Email                      string
	Facebookid                 string
	Password                   string
	Mobile                     string
	UserType                   string
	RegDate                    string
	LoginDate                  string
	LoginIP                    string
	LoginMode                  string
	Status                     string
	Membership                 string
	Televia                    string
	PaseUrbano                 string
	Viapass                    string
	AdditionalMultiplier       string
	AutoTrustScore             string
	ManualTrustScore           string
	SocialNetworkScore         string
	OtpRequest                 string
	OtpRequestTime             string
	TrustScore                 string
	Prefered                   string
	Isbouncedemail             string
	Isbouncedmaxattempts       string
	AcquisitionSource          string
	GCMTKNID                   string
	IsEmailVerified            string
	IsPhoneVerified            string
	PDWChanged                 string
	Isvalidemail               string
	IsCorporate                string
	CookieChanged              string
	MastercardMembership       string
	MastercardMembershipDate   string
	IsVendor                   string
	Commission                 string
	VipDate                    string
	Attemtps                   string
	IsReusedPasswordReset      string
	MobileCodi                 string
	IsMerchant                 string
	TimeLock                   string
	SuccessRecoveryAttempts    string
	IsbouncedemailMethod2      string
	EmailSinDots               string
	BouncedSource              string
	AdditionalWalletMultiplier string
	DeletedAt                  string
}{
	ID:                         "id",
	Name:                       "name",
	Email:                      "email",
	Facebookid:                 "facebookid",
	Password:                   "password",
	Mobile:                     "mobile",
	UserType:                   "user_type",
	RegDate:                    "reg_date",
	LoginDate:                  "login_date",
	LoginIP:                    "login_ip",
	LoginMode:                  "login_mode",
	Status:                     "status",
	Membership:                 "membership",
	Televia:                    "Televia",
	PaseUrbano:                 "PaseUrbano",
	Viapass:                    "Viapass",
	AdditionalMultiplier:       "additional_multiplier",
	AutoTrustScore:             "auto_trust_score",
	ManualTrustScore:           "manual_trust_score",
	SocialNetworkScore:         "social_network_score",
	OtpRequest:                 "otpRequest",
	OtpRequestTime:             "otpRequestTime",
	TrustScore:                 "trust_score",
	Prefered:                   "prefered",
	Isbouncedemail:             "isbouncedemail",
	Isbouncedmaxattempts:       "isbouncedmaxattempts",
	AcquisitionSource:          "acquisition_source",
	GCMTKNID:                   "gcm_tkn_id",
	IsEmailVerified:            "isEmailVerified",
	IsPhoneVerified:            "isPhoneVerified",
	PDWChanged:                 "pdw_changed",
	Isvalidemail:               "isvalidemail",
	IsCorporate:                "is_corporate",
	CookieChanged:              "cookie_changed",
	MastercardMembership:       "mastercard_membership",
	MastercardMembershipDate:   "mastercard_membership_date",
	IsVendor:                   "isVendor",
	Commission:                 "commission",
	VipDate:                    "vip_date",
	Attemtps:                   "attemtps",
	IsReusedPasswordReset:      "isReusedPasswordReset",
	MobileCodi:                 "mobile_codi",
	IsMerchant:                 "isMerchant",
	TimeLock:                   "time_lock",
	SuccessRecoveryAttempts:    "successRecoveryAttempts",
	IsbouncedemailMethod2:      "isbouncedemail_method2",
	EmailSinDots:               "emailSinDots",
	BouncedSource:              "bounced_source",
	AdditionalWalletMultiplier: "additional_wallet_multiplier",
	DeletedAt:                  "deleted_at",
}

var TBLUserTableColumns = struct {
	ID                         string
	Name                       string
	Email                      string
	Facebookid                 string
	Password                   string
	Mobile                     string
	UserType                   string
	RegDate                    string
	LoginDate                  string
	LoginIP                    string
	LoginMode                  string
	Status                     string
	Membership                 string
	Televia                    string
	PaseUrbano                 string
	Viapass                    string
	AdditionalMultiplier       string
	AutoTrustScore             string
	ManualTrustScore           string
	SocialNetworkScore         string
	OtpRequest                 string
	OtpRequestTime             string
	TrustScore                 string
	Prefered                   string
	Isbouncedemail             string
	Isbouncedmaxattempts       string
	AcquisitionSource          string
	GCMTKNID                   string
	IsEmailVerified            string
	IsPhoneVerified            string
	PDWChanged                 string
	Isvalidemail               string
	IsCorporate                string
	CookieChanged              string
	MastercardMembership       string
	MastercardMembershipDate   string
	IsVendor                   string
	Commission                 string
	VipDate                    string
	Attemtps                   string
	IsReusedPasswordReset      string
	MobileCodi                 string
	IsMerchant                 string
	TimeLock                   string
	SuccessRecoveryAttempts    string
	IsbouncedemailMethod2      string
	EmailSinDots               string
	BouncedSource              string
	AdditionalWalletMultiplier string
	DeletedAt                  string
}{
	ID:                         "tbl_users.id",
	Name:                       "tbl_users.name",
	Email:                      "tbl_users.email",
	Facebookid:                 "tbl_users.facebookid",
	Password:                   "tbl_users.password",
	Mobile:                     "tbl_users.mobile",
	UserType:                   "tbl_users.user_type",
	RegDate:                    "tbl_users.reg_date",
	LoginDate:                  "tbl_users.login_date",
	LoginIP:                    "tbl_users.login_ip",
	LoginMode:                  "tbl_users.login_mode",
	Status:                     "tbl_users.status",
	Membership:                 "tbl_users.membership",
	Televia:                    "tbl_users.Televia",
	PaseUrbano:                 "tbl_users.PaseUrbano",
	Viapass:                    "tbl_users.Viapass",
	AdditionalMultiplier:       "tbl_users.additional_multiplier",
	AutoTrustScore:             "tbl_users.auto_trust_score",
	ManualTrustScore:           "tbl_users.manual_trust_score",
	SocialNetworkScore:         "tbl_users.social_network_score",
	OtpRequest:                 "tbl_users.otpRequest",
	OtpRequestTime:             "tbl_users.otpRequestTime",
	TrustScore:                 "tbl_users.trust_score",
	Prefered:                   "tbl_users.prefered",
	Isbouncedemail:             "tbl_users.isbouncedemail",
	Isbouncedmaxattempts:       "tbl_users.isbouncedmaxattempts",
	AcquisitionSource:          "tbl_users.acquisition_source",
	GCMTKNID:                   "tbl_users.gcm_tkn_id",
	IsEmailVerified:            "tbl_users.isEmailVerified",
	IsPhoneVerified:            "tbl_users.isPhoneVerified",
	PDWChanged:                 "tbl_users.pdw_changed",
	Isvalidemail:               "tbl_users.isvalidemail",
	IsCorporate:                "tbl_users.is_corporate",
	CookieChanged:              "tbl_users.cookie_changed",
	MastercardMembership:       "tbl_users.mastercard_membership",
	MastercardMembershipDate:   "tbl_users.mastercard_membership_date",
	IsVendor:                   "tbl_users.isVendor",
	Commission:                 "tbl_users.commission",
	VipDate:                    "tbl_users.vip_date",
	Attemtps:                   "tbl_users.attemtps",
	IsReusedPasswordReset:      "tbl_users.isReusedPasswordReset",
	MobileCodi:                 "tbl_users.mobile_codi",
	IsMerchant:                 "tbl_users.isMerchant",
	TimeLock:                   "tbl_users.time_lock",
	SuccessRecoveryAttempts:    "tbl_users.successRecoveryAttempts",
	IsbouncedemailMethod2:      "tbl_users.isbouncedemail_method2",
	EmailSinDots:               "tbl_users.emailSinDots",
	BouncedSource:              "tbl_users.bounced_source",
	AdditionalWalletMultiplier: "tbl_users.additional_wallet_multiplier",
	DeletedAt:                  "tbl_users.deleted_at",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperint8 struct{ field string }

func (w whereHelperint8) EQ(x int8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint8) NEQ(x int8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint8) LT(x int8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint8) LTE(x int8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint8) GT(x int8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint8) GTE(x int8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint8) IN(slice []int8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint8) NIN(slice []int8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int8 struct{ field string }

func (w whereHelpernull_Int8) EQ(x null.Int8) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int8) NEQ(x null.Int8) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int8) LT(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int8) LTE(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int8) GT(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int8) GTE(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int8) IN(slice []int8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int8) NIN(slice []int8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int8) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int8) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Float32 struct{ field string }

func (w whereHelpernull_Float32) EQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float32) NEQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float32) LT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float32) LTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float32) GT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float32) GTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var TBLUserWhere = struct {
	ID                         whereHelperint
	Name                       whereHelperstring
	Email                      whereHelperstring
	Facebookid                 whereHelperstring
	Password                   whereHelperstring
	Mobile                     whereHelpernull_Int64
	UserType                   whereHelperint8
	RegDate                    whereHelpertime_Time
	LoginDate                  whereHelpertime_Time
	LoginIP                    whereHelperstring
	LoginMode                  whereHelperbool
	Status                     whereHelperbool
	Membership                 whereHelperint
	Televia                    whereHelpernull_String
	PaseUrbano                 whereHelpernull_String
	Viapass                    whereHelpernull_String
	AdditionalMultiplier       whereHelperfloat64
	AutoTrustScore             whereHelperfloat64
	ManualTrustScore           whereHelperfloat64
	SocialNetworkScore         whereHelpernull_Float64
	OtpRequest                 whereHelpernull_Int
	OtpRequestTime             whereHelpernull_Time
	TrustScore                 whereHelpernull_Float64
	Prefered                   whereHelpernull_JSON
	Isbouncedemail             whereHelpernull_Int
	Isbouncedmaxattempts       whereHelperint
	AcquisitionSource          whereHelpernull_String
	GCMTKNID                   whereHelpernull_Int
	IsEmailVerified            whereHelpernull_Int8
	IsPhoneVerified            whereHelpernull_Int8
	PDWChanged                 whereHelpernull_Int
	Isvalidemail               whereHelpernull_Int8
	IsCorporate                whereHelpernull_Int
	CookieChanged              whereHelpernull_Int
	MastercardMembership       whereHelpernull_Int8
	MastercardMembershipDate   whereHelpernull_Time
	IsVendor                   whereHelpernull_Int8
	Commission                 whereHelpernull_Float32
	VipDate                    whereHelpernull_Time
	Attemtps                   whereHelpernull_Int
	IsReusedPasswordReset      whereHelpernull_Bool
	MobileCodi                 whereHelpernull_String
	IsMerchant                 whereHelpernull_Int8
	TimeLock                   whereHelpernull_Time
	SuccessRecoveryAttempts    whereHelpernull_Int8
	IsbouncedemailMethod2      whereHelpernull_String
	EmailSinDots               whereHelpernull_String
	BouncedSource              whereHelpernull_String
	AdditionalWalletMultiplier whereHelpernull_Float64
	DeletedAt                  whereHelpernull_Time
}{
	ID:                         whereHelperint{field: "`tbl_users`.`id`"},
	Name:                       whereHelperstring{field: "`tbl_users`.`name`"},
	Email:                      whereHelperstring{field: "`tbl_users`.`email`"},
	Facebookid:                 whereHelperstring{field: "`tbl_users`.`facebookid`"},
	Password:                   whereHelperstring{field: "`tbl_users`.`password`"},
	Mobile:                     whereHelpernull_Int64{field: "`tbl_users`.`mobile`"},
	UserType:                   whereHelperint8{field: "`tbl_users`.`user_type`"},
	RegDate:                    whereHelpertime_Time{field: "`tbl_users`.`reg_date`"},
	LoginDate:                  whereHelpertime_Time{field: "`tbl_users`.`login_date`"},
	LoginIP:                    whereHelperstring{field: "`tbl_users`.`login_ip`"},
	LoginMode:                  whereHelperbool{field: "`tbl_users`.`login_mode`"},
	Status:                     whereHelperbool{field: "`tbl_users`.`status`"},
	Membership:                 whereHelperint{field: "`tbl_users`.`membership`"},
	Televia:                    whereHelpernull_String{field: "`tbl_users`.`Televia`"},
	PaseUrbano:                 whereHelpernull_String{field: "`tbl_users`.`PaseUrbano`"},
	Viapass:                    whereHelpernull_String{field: "`tbl_users`.`Viapass`"},
	AdditionalMultiplier:       whereHelperfloat64{field: "`tbl_users`.`additional_multiplier`"},
	AutoTrustScore:             whereHelperfloat64{field: "`tbl_users`.`auto_trust_score`"},
	ManualTrustScore:           whereHelperfloat64{field: "`tbl_users`.`manual_trust_score`"},
	SocialNetworkScore:         whereHelpernull_Float64{field: "`tbl_users`.`social_network_score`"},
	OtpRequest:                 whereHelpernull_Int{field: "`tbl_users`.`otpRequest`"},
	OtpRequestTime:             whereHelpernull_Time{field: "`tbl_users`.`otpRequestTime`"},
	TrustScore:                 whereHelpernull_Float64{field: "`tbl_users`.`trust_score`"},
	Prefered:                   whereHelpernull_JSON{field: "`tbl_users`.`prefered`"},
	Isbouncedemail:             whereHelpernull_Int{field: "`tbl_users`.`isbouncedemail`"},
	Isbouncedmaxattempts:       whereHelperint{field: "`tbl_users`.`isbouncedmaxattempts`"},
	AcquisitionSource:          whereHelpernull_String{field: "`tbl_users`.`acquisition_source`"},
	GCMTKNID:                   whereHelpernull_Int{field: "`tbl_users`.`gcm_tkn_id`"},
	IsEmailVerified:            whereHelpernull_Int8{field: "`tbl_users`.`isEmailVerified`"},
	IsPhoneVerified:            whereHelpernull_Int8{field: "`tbl_users`.`isPhoneVerified`"},
	PDWChanged:                 whereHelpernull_Int{field: "`tbl_users`.`pdw_changed`"},
	Isvalidemail:               whereHelpernull_Int8{field: "`tbl_users`.`isvalidemail`"},
	IsCorporate:                whereHelpernull_Int{field: "`tbl_users`.`is_corporate`"},
	CookieChanged:              whereHelpernull_Int{field: "`tbl_users`.`cookie_changed`"},
	MastercardMembership:       whereHelpernull_Int8{field: "`tbl_users`.`mastercard_membership`"},
	MastercardMembershipDate:   whereHelpernull_Time{field: "`tbl_users`.`mastercard_membership_date`"},
	IsVendor:                   whereHelpernull_Int8{field: "`tbl_users`.`isVendor`"},
	Commission:                 whereHelpernull_Float32{field: "`tbl_users`.`commission`"},
	VipDate:                    whereHelpernull_Time{field: "`tbl_users`.`vip_date`"},
	Attemtps:                   whereHelpernull_Int{field: "`tbl_users`.`attemtps`"},
	IsReusedPasswordReset:      whereHelpernull_Bool{field: "`tbl_users`.`isReusedPasswordReset`"},
	MobileCodi:                 whereHelpernull_String{field: "`tbl_users`.`mobile_codi`"},
	IsMerchant:                 whereHelpernull_Int8{field: "`tbl_users`.`isMerchant`"},
	TimeLock:                   whereHelpernull_Time{field: "`tbl_users`.`time_lock`"},
	SuccessRecoveryAttempts:    whereHelpernull_Int8{field: "`tbl_users`.`successRecoveryAttempts`"},
	IsbouncedemailMethod2:      whereHelpernull_String{field: "`tbl_users`.`isbouncedemail_method2`"},
	EmailSinDots:               whereHelpernull_String{field: "`tbl_users`.`emailSinDots`"},
	BouncedSource:              whereHelpernull_String{field: "`tbl_users`.`bounced_source`"},
	AdditionalWalletMultiplier: whereHelpernull_Float64{field: "`tbl_users`.`additional_wallet_multiplier`"},
	DeletedAt:                  whereHelpernull_Time{field: "`tbl_users`.`deleted_at`"},
}

// TBLUserRels is where relationship names are stored.
var TBLUserRels = struct {
}{}

// tblUserR is where relationships are stored.
type tblUserR struct {
}

// NewStruct creates a new relationship struct
func (*tblUserR) NewStruct() *tblUserR {
	return &tblUserR{}
}

// tblUserL is where Load methods for each relationship are stored.
type tblUserL struct{}

var (
	tblUserAllColumns            = []string{"id", "name", "email", "facebookid", "password", "mobile", "user_type", "reg_date", "login_date", "login_ip", "login_mode", "status", "membership", "Televia", "PaseUrbano", "Viapass", "additional_multiplier", "auto_trust_score", "manual_trust_score", "social_network_score", "otpRequest", "otpRequestTime", "trust_score", "prefered", "isbouncedemail", "isbouncedmaxattempts", "acquisition_source", "gcm_tkn_id", "isEmailVerified", "isPhoneVerified", "pdw_changed", "isvalidemail", "is_corporate", "cookie_changed", "mastercard_membership", "mastercard_membership_date", "isVendor", "commission", "vip_date", "attemtps", "isReusedPasswordReset", "mobile_codi", "isMerchant", "time_lock", "successRecoveryAttempts", "isbouncedemail_method2", "emailSinDots", "bounced_source", "additional_wallet_multiplier", "deleted_at"}
	tblUserColumnsWithoutDefault = []string{"name", "email", "facebookid", "password", "mobile", "reg_date", "login_date", "login_ip", "login_mode", "status", "Televia", "PaseUrbano", "Viapass", "additional_multiplier", "auto_trust_score", "manual_trust_score", "social_network_score", "otpRequest", "otpRequestTime", "prefered", "isbouncedemail", "isEmailVerified", "isPhoneVerified", "pdw_changed", "isvalidemail", "cookie_changed", "mastercard_membership_date", "isVendor", "commission", "vip_date", "isReusedPasswordReset", "mobile_codi", "isMerchant", "time_lock", "isbouncedemail_method2", "emailSinDots", "bounced_source", "additional_wallet_multiplier", "deleted_at"}
	tblUserColumnsWithDefault    = []string{"id", "user_type", "membership", "trust_score", "isbouncedmaxattempts", "acquisition_source", "gcm_tkn_id", "is_corporate", "mastercard_membership", "attemtps", "successRecoveryAttempts"}
	tblUserPrimaryKeyColumns     = []string{"id"}
	tblUserGeneratedColumns      = []string{}
)

type (
	// TBLUserSlice is an alias for a slice of pointers to TBLUser.
	// This should almost always be used instead of []TBLUser.
	TBLUserSlice []*TBLUser
	// TBLUserHook is the signature for custom TBLUser hook methods
	TBLUserHook func(context.Context, boil.ContextExecutor, *TBLUser) error

	tblUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tblUserType                 = reflect.TypeOf(&TBLUser{})
	tblUserMapping              = queries.MakeStructMapping(tblUserType)
	tblUserPrimaryKeyMapping, _ = queries.BindMapping(tblUserType, tblUserMapping, tblUserPrimaryKeyColumns)
	tblUserInsertCacheMut       sync.RWMutex
	tblUserInsertCache          = make(map[string]insertCache)
	tblUserUpdateCacheMut       sync.RWMutex
	tblUserUpdateCache          = make(map[string]updateCache)
	tblUserUpsertCacheMut       sync.RWMutex
	tblUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tblUserAfterSelectHooks []TBLUserHook

var tblUserBeforeInsertHooks []TBLUserHook
var tblUserAfterInsertHooks []TBLUserHook

var tblUserBeforeUpdateHooks []TBLUserHook
var tblUserAfterUpdateHooks []TBLUserHook

var tblUserBeforeDeleteHooks []TBLUserHook
var tblUserAfterDeleteHooks []TBLUserHook

var tblUserBeforeUpsertHooks []TBLUserHook
var tblUserAfterUpsertHooks []TBLUserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TBLUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tblUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TBLUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tblUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TBLUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tblUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TBLUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tblUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TBLUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tblUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TBLUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tblUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TBLUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tblUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TBLUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tblUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TBLUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tblUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTBLUserHook registers your hook function for all future operations.
func AddTBLUserHook(hookPoint boil.HookPoint, tblUserHook TBLUserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tblUserAfterSelectHooks = append(tblUserAfterSelectHooks, tblUserHook)
	case boil.BeforeInsertHook:
		tblUserBeforeInsertHooks = append(tblUserBeforeInsertHooks, tblUserHook)
	case boil.AfterInsertHook:
		tblUserAfterInsertHooks = append(tblUserAfterInsertHooks, tblUserHook)
	case boil.BeforeUpdateHook:
		tblUserBeforeUpdateHooks = append(tblUserBeforeUpdateHooks, tblUserHook)
	case boil.AfterUpdateHook:
		tblUserAfterUpdateHooks = append(tblUserAfterUpdateHooks, tblUserHook)
	case boil.BeforeDeleteHook:
		tblUserBeforeDeleteHooks = append(tblUserBeforeDeleteHooks, tblUserHook)
	case boil.AfterDeleteHook:
		tblUserAfterDeleteHooks = append(tblUserAfterDeleteHooks, tblUserHook)
	case boil.BeforeUpsertHook:
		tblUserBeforeUpsertHooks = append(tblUserBeforeUpsertHooks, tblUserHook)
	case boil.AfterUpsertHook:
		tblUserAfterUpsertHooks = append(tblUserAfterUpsertHooks, tblUserHook)
	}
}

// One returns a single tblUser record from the query.
func (q tblUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TBLUser, error) {
	o := &TBLUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tbl_users")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TBLUser records from the query.
func (q tblUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (TBLUserSlice, error) {
	var o []*TBLUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TBLUser slice")
	}

	if len(tblUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TBLUser records in the query.
func (q tblUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tbl_users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tblUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tbl_users exists")
	}

	return count > 0, nil
}

// TBLUsers retrieves all the records using an executor.
func TBLUsers(mods ...qm.QueryMod) tblUserQuery {
	mods = append(mods, qm.From("`tbl_users`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`tbl_users`.*"})
	}

	return tblUserQuery{q}
}

// FindTBLUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTBLUser(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TBLUser, error) {
	tblUserObj := &TBLUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `tbl_users` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tblUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tbl_users")
	}

	if err = tblUserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tblUserObj, err
	}

	return tblUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TBLUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tbl_users provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tblUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tblUserInsertCacheMut.RLock()
	cache, cached := tblUserInsertCache[key]
	tblUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tblUserAllColumns,
			tblUserColumnsWithDefault,
			tblUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tblUserType, tblUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tblUserType, tblUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `tbl_users` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `tbl_users` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `tbl_users` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tblUserPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tbl_users")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == tblUserMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for tbl_users")
	}

CacheNoHooks:
	if !cached {
		tblUserInsertCacheMut.Lock()
		tblUserInsertCache[key] = cache
		tblUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TBLUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TBLUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tblUserUpdateCacheMut.RLock()
	cache, cached := tblUserUpdateCache[key]
	tblUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tblUserAllColumns,
			tblUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tbl_users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `tbl_users` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tblUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tblUserType, tblUserMapping, append(wl, tblUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tbl_users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tbl_users")
	}

	if !cached {
		tblUserUpdateCacheMut.Lock()
		tblUserUpdateCache[key] = cache
		tblUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tblUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tbl_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tbl_users")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TBLUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tblUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `tbl_users` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tblUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tblUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tblUser")
	}
	return rowsAff, nil
}

var mySQLTBLUserUniqueColumns = []string{
	"id",
	"email",
	"mobile",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TBLUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tbl_users provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tblUserColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTBLUserUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tblUserUpsertCacheMut.RLock()
	cache, cached := tblUserUpsertCache[key]
	tblUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tblUserAllColumns,
			tblUserColumnsWithDefault,
			tblUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tblUserAllColumns,
			tblUserPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert tbl_users, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`tbl_users`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `tbl_users` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tblUserType, tblUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tblUserType, tblUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for tbl_users")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == tblUserMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tblUserType, tblUserMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for tbl_users")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for tbl_users")
	}

CacheNoHooks:
	if !cached {
		tblUserUpsertCacheMut.Lock()
		tblUserUpsertCache[key] = cache
		tblUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TBLUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TBLUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TBLUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tblUserPrimaryKeyMapping)
	sql := "DELETE FROM `tbl_users` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tbl_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tbl_users")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tblUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tblUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tbl_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tbl_users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TBLUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tblUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tblUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `tbl_users` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tblUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tblUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tbl_users")
	}

	if len(tblUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TBLUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTBLUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TBLUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TBLUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tblUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `tbl_users`.* FROM `tbl_users` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tblUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TBLUserSlice")
	}

	*o = slice

	return nil
}

// TBLUserExists checks if the TBLUser row exists.
func TBLUserExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `tbl_users` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tbl_users exists")
	}

	return exists, nil
}

// Exists checks if the TBLUser row exists.
func (o *TBLUser) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TBLUserExists(ctx, exec, o.ID)
}
