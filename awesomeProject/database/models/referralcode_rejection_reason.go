// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ReferralcodeRejectionReason is an object representing the database table.
type ReferralcodeRejectionReason struct {
	RejectionCode   uint8       `boil:"rejection_code" json:"rejection_code" toml:"rejection_code" yaml:"rejection_code"`
	RejectionReason null.String `boil:"rejection_reason" json:"rejection_reason,omitempty" toml:"rejection_reason" yaml:"rejection_reason,omitempty"`
	CreatedAt       null.Time   `boil:"createdAt" json:"createdAt,omitempty" toml:"createdAt" yaml:"createdAt,omitempty"`
	ModifiedAt      null.Time   `boil:"modifiedAt" json:"modifiedAt,omitempty" toml:"modifiedAt" yaml:"modifiedAt,omitempty"`

	R *referralcodeRejectionReasonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L referralcodeRejectionReasonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReferralcodeRejectionReasonColumns = struct {
	RejectionCode   string
	RejectionReason string
	CreatedAt       string
	ModifiedAt      string
}{
	RejectionCode:   "rejection_code",
	RejectionReason: "rejection_reason",
	CreatedAt:       "createdAt",
	ModifiedAt:      "modifiedAt",
}

var ReferralcodeRejectionReasonTableColumns = struct {
	RejectionCode   string
	RejectionReason string
	CreatedAt       string
	ModifiedAt      string
}{
	RejectionCode:   "referralcode_rejection_reason.rejection_code",
	RejectionReason: "referralcode_rejection_reason.rejection_reason",
	CreatedAt:       "referralcode_rejection_reason.createdAt",
	ModifiedAt:      "referralcode_rejection_reason.modifiedAt",
}

// Generated where

type whereHelperuint8 struct{ field string }

func (w whereHelperuint8) EQ(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint8) NEQ(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint8) LT(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint8) LTE(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint8) GT(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint8) GTE(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint8) IN(slice []uint8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint8) NIN(slice []uint8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ReferralcodeRejectionReasonWhere = struct {
	RejectionCode   whereHelperuint8
	RejectionReason whereHelpernull_String
	CreatedAt       whereHelpernull_Time
	ModifiedAt      whereHelpernull_Time
}{
	RejectionCode:   whereHelperuint8{field: "`referralcode_rejection_reason`.`rejection_code`"},
	RejectionReason: whereHelpernull_String{field: "`referralcode_rejection_reason`.`rejection_reason`"},
	CreatedAt:       whereHelpernull_Time{field: "`referralcode_rejection_reason`.`createdAt`"},
	ModifiedAt:      whereHelpernull_Time{field: "`referralcode_rejection_reason`.`modifiedAt`"},
}

// ReferralcodeRejectionReasonRels is where relationship names are stored.
var ReferralcodeRejectionReasonRels = struct {
}{}

// referralcodeRejectionReasonR is where relationships are stored.
type referralcodeRejectionReasonR struct {
}

// NewStruct creates a new relationship struct
func (*referralcodeRejectionReasonR) NewStruct() *referralcodeRejectionReasonR {
	return &referralcodeRejectionReasonR{}
}

// referralcodeRejectionReasonL is where Load methods for each relationship are stored.
type referralcodeRejectionReasonL struct{}

var (
	referralcodeRejectionReasonAllColumns            = []string{"rejection_code", "rejection_reason", "createdAt", "modifiedAt"}
	referralcodeRejectionReasonColumnsWithoutDefault = []string{"rejection_code", "rejection_reason"}
	referralcodeRejectionReasonColumnsWithDefault    = []string{"createdAt", "modifiedAt"}
	referralcodeRejectionReasonPrimaryKeyColumns     = []string{"rejection_code"}
	referralcodeRejectionReasonGeneratedColumns      = []string{}
)

type (
	// ReferralcodeRejectionReasonSlice is an alias for a slice of pointers to ReferralcodeRejectionReason.
	// This should almost always be used instead of []ReferralcodeRejectionReason.
	ReferralcodeRejectionReasonSlice []*ReferralcodeRejectionReason
	// ReferralcodeRejectionReasonHook is the signature for custom ReferralcodeRejectionReason hook methods
	ReferralcodeRejectionReasonHook func(context.Context, boil.ContextExecutor, *ReferralcodeRejectionReason) error

	referralcodeRejectionReasonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	referralcodeRejectionReasonType                 = reflect.TypeOf(&ReferralcodeRejectionReason{})
	referralcodeRejectionReasonMapping              = queries.MakeStructMapping(referralcodeRejectionReasonType)
	referralcodeRejectionReasonPrimaryKeyMapping, _ = queries.BindMapping(referralcodeRejectionReasonType, referralcodeRejectionReasonMapping, referralcodeRejectionReasonPrimaryKeyColumns)
	referralcodeRejectionReasonInsertCacheMut       sync.RWMutex
	referralcodeRejectionReasonInsertCache          = make(map[string]insertCache)
	referralcodeRejectionReasonUpdateCacheMut       sync.RWMutex
	referralcodeRejectionReasonUpdateCache          = make(map[string]updateCache)
	referralcodeRejectionReasonUpsertCacheMut       sync.RWMutex
	referralcodeRejectionReasonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var referralcodeRejectionReasonAfterSelectHooks []ReferralcodeRejectionReasonHook

var referralcodeRejectionReasonBeforeInsertHooks []ReferralcodeRejectionReasonHook
var referralcodeRejectionReasonAfterInsertHooks []ReferralcodeRejectionReasonHook

var referralcodeRejectionReasonBeforeUpdateHooks []ReferralcodeRejectionReasonHook
var referralcodeRejectionReasonAfterUpdateHooks []ReferralcodeRejectionReasonHook

var referralcodeRejectionReasonBeforeDeleteHooks []ReferralcodeRejectionReasonHook
var referralcodeRejectionReasonAfterDeleteHooks []ReferralcodeRejectionReasonHook

var referralcodeRejectionReasonBeforeUpsertHooks []ReferralcodeRejectionReasonHook
var referralcodeRejectionReasonAfterUpsertHooks []ReferralcodeRejectionReasonHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReferralcodeRejectionReason) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range referralcodeRejectionReasonAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReferralcodeRejectionReason) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range referralcodeRejectionReasonBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReferralcodeRejectionReason) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range referralcodeRejectionReasonAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReferralcodeRejectionReason) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range referralcodeRejectionReasonBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReferralcodeRejectionReason) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range referralcodeRejectionReasonAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReferralcodeRejectionReason) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range referralcodeRejectionReasonBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReferralcodeRejectionReason) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range referralcodeRejectionReasonAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReferralcodeRejectionReason) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range referralcodeRejectionReasonBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReferralcodeRejectionReason) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range referralcodeRejectionReasonAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReferralcodeRejectionReasonHook registers your hook function for all future operations.
func AddReferralcodeRejectionReasonHook(hookPoint boil.HookPoint, referralcodeRejectionReasonHook ReferralcodeRejectionReasonHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		referralcodeRejectionReasonAfterSelectHooks = append(referralcodeRejectionReasonAfterSelectHooks, referralcodeRejectionReasonHook)
	case boil.BeforeInsertHook:
		referralcodeRejectionReasonBeforeInsertHooks = append(referralcodeRejectionReasonBeforeInsertHooks, referralcodeRejectionReasonHook)
	case boil.AfterInsertHook:
		referralcodeRejectionReasonAfterInsertHooks = append(referralcodeRejectionReasonAfterInsertHooks, referralcodeRejectionReasonHook)
	case boil.BeforeUpdateHook:
		referralcodeRejectionReasonBeforeUpdateHooks = append(referralcodeRejectionReasonBeforeUpdateHooks, referralcodeRejectionReasonHook)
	case boil.AfterUpdateHook:
		referralcodeRejectionReasonAfterUpdateHooks = append(referralcodeRejectionReasonAfterUpdateHooks, referralcodeRejectionReasonHook)
	case boil.BeforeDeleteHook:
		referralcodeRejectionReasonBeforeDeleteHooks = append(referralcodeRejectionReasonBeforeDeleteHooks, referralcodeRejectionReasonHook)
	case boil.AfterDeleteHook:
		referralcodeRejectionReasonAfterDeleteHooks = append(referralcodeRejectionReasonAfterDeleteHooks, referralcodeRejectionReasonHook)
	case boil.BeforeUpsertHook:
		referralcodeRejectionReasonBeforeUpsertHooks = append(referralcodeRejectionReasonBeforeUpsertHooks, referralcodeRejectionReasonHook)
	case boil.AfterUpsertHook:
		referralcodeRejectionReasonAfterUpsertHooks = append(referralcodeRejectionReasonAfterUpsertHooks, referralcodeRejectionReasonHook)
	}
}

// One returns a single referralcodeRejectionReason record from the query.
func (q referralcodeRejectionReasonQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReferralcodeRejectionReason, error) {
	o := &ReferralcodeRejectionReason{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for referralcode_rejection_reason")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ReferralcodeRejectionReason records from the query.
func (q referralcodeRejectionReasonQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReferralcodeRejectionReasonSlice, error) {
	var o []*ReferralcodeRejectionReason

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ReferralcodeRejectionReason slice")
	}

	if len(referralcodeRejectionReasonAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ReferralcodeRejectionReason records in the query.
func (q referralcodeRejectionReasonQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count referralcode_rejection_reason rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q referralcodeRejectionReasonQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if referralcode_rejection_reason exists")
	}

	return count > 0, nil
}

// ReferralcodeRejectionReasons retrieves all the records using an executor.
func ReferralcodeRejectionReasons(mods ...qm.QueryMod) referralcodeRejectionReasonQuery {
	mods = append(mods, qm.From("`referralcode_rejection_reason`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`referralcode_rejection_reason`.*"})
	}

	return referralcodeRejectionReasonQuery{q}
}

// FindReferralcodeRejectionReason retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReferralcodeRejectionReason(ctx context.Context, exec boil.ContextExecutor, rejectionCode uint8, selectCols ...string) (*ReferralcodeRejectionReason, error) {
	referralcodeRejectionReasonObj := &ReferralcodeRejectionReason{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `referralcode_rejection_reason` where `rejection_code`=?", sel,
	)

	q := queries.Raw(query, rejectionCode)

	err := q.Bind(ctx, exec, referralcodeRejectionReasonObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from referralcode_rejection_reason")
	}

	if err = referralcodeRejectionReasonObj.doAfterSelectHooks(ctx, exec); err != nil {
		return referralcodeRejectionReasonObj, err
	}

	return referralcodeRejectionReasonObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReferralcodeRejectionReason) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no referralcode_rejection_reason provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(referralcodeRejectionReasonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	referralcodeRejectionReasonInsertCacheMut.RLock()
	cache, cached := referralcodeRejectionReasonInsertCache[key]
	referralcodeRejectionReasonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			referralcodeRejectionReasonAllColumns,
			referralcodeRejectionReasonColumnsWithDefault,
			referralcodeRejectionReasonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(referralcodeRejectionReasonType, referralcodeRejectionReasonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(referralcodeRejectionReasonType, referralcodeRejectionReasonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `referralcode_rejection_reason` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `referralcode_rejection_reason` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `referralcode_rejection_reason` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, referralcodeRejectionReasonPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into referralcode_rejection_reason")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.RejectionCode,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for referralcode_rejection_reason")
	}

CacheNoHooks:
	if !cached {
		referralcodeRejectionReasonInsertCacheMut.Lock()
		referralcodeRejectionReasonInsertCache[key] = cache
		referralcodeRejectionReasonInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ReferralcodeRejectionReason.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReferralcodeRejectionReason) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	referralcodeRejectionReasonUpdateCacheMut.RLock()
	cache, cached := referralcodeRejectionReasonUpdateCache[key]
	referralcodeRejectionReasonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			referralcodeRejectionReasonAllColumns,
			referralcodeRejectionReasonPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update referralcode_rejection_reason, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `referralcode_rejection_reason` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, referralcodeRejectionReasonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(referralcodeRejectionReasonType, referralcodeRejectionReasonMapping, append(wl, referralcodeRejectionReasonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update referralcode_rejection_reason row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for referralcode_rejection_reason")
	}

	if !cached {
		referralcodeRejectionReasonUpdateCacheMut.Lock()
		referralcodeRejectionReasonUpdateCache[key] = cache
		referralcodeRejectionReasonUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q referralcodeRejectionReasonQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for referralcode_rejection_reason")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for referralcode_rejection_reason")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReferralcodeRejectionReasonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), referralcodeRejectionReasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `referralcode_rejection_reason` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, referralcodeRejectionReasonPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in referralcodeRejectionReason slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all referralcodeRejectionReason")
	}
	return rowsAff, nil
}

var mySQLReferralcodeRejectionReasonUniqueColumns = []string{
	"rejection_code",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReferralcodeRejectionReason) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no referralcode_rejection_reason provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(referralcodeRejectionReasonColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLReferralcodeRejectionReasonUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	referralcodeRejectionReasonUpsertCacheMut.RLock()
	cache, cached := referralcodeRejectionReasonUpsertCache[key]
	referralcodeRejectionReasonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			referralcodeRejectionReasonAllColumns,
			referralcodeRejectionReasonColumnsWithDefault,
			referralcodeRejectionReasonColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			referralcodeRejectionReasonAllColumns,
			referralcodeRejectionReasonPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert referralcode_rejection_reason, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`referralcode_rejection_reason`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `referralcode_rejection_reason` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(referralcodeRejectionReasonType, referralcodeRejectionReasonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(referralcodeRejectionReasonType, referralcodeRejectionReasonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for referralcode_rejection_reason")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(referralcodeRejectionReasonType, referralcodeRejectionReasonMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for referralcode_rejection_reason")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for referralcode_rejection_reason")
	}

CacheNoHooks:
	if !cached {
		referralcodeRejectionReasonUpsertCacheMut.Lock()
		referralcodeRejectionReasonUpsertCache[key] = cache
		referralcodeRejectionReasonUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ReferralcodeRejectionReason record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReferralcodeRejectionReason) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ReferralcodeRejectionReason provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), referralcodeRejectionReasonPrimaryKeyMapping)
	sql := "DELETE FROM `referralcode_rejection_reason` WHERE `rejection_code`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from referralcode_rejection_reason")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for referralcode_rejection_reason")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q referralcodeRejectionReasonQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no referralcodeRejectionReasonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from referralcode_rejection_reason")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for referralcode_rejection_reason")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReferralcodeRejectionReasonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(referralcodeRejectionReasonBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), referralcodeRejectionReasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `referralcode_rejection_reason` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, referralcodeRejectionReasonPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from referralcodeRejectionReason slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for referralcode_rejection_reason")
	}

	if len(referralcodeRejectionReasonAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReferralcodeRejectionReason) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReferralcodeRejectionReason(ctx, exec, o.RejectionCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReferralcodeRejectionReasonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReferralcodeRejectionReasonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), referralcodeRejectionReasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `referralcode_rejection_reason`.* FROM `referralcode_rejection_reason` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, referralcodeRejectionReasonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReferralcodeRejectionReasonSlice")
	}

	*o = slice

	return nil
}

// ReferralcodeRejectionReasonExists checks if the ReferralcodeRejectionReason row exists.
func ReferralcodeRejectionReasonExists(ctx context.Context, exec boil.ContextExecutor, rejectionCode uint8) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `referralcode_rejection_reason` where `rejection_code`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, rejectionCode)
	}
	row := exec.QueryRowContext(ctx, sql, rejectionCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if referralcode_rejection_reason exists")
	}

	return exists, nil
}

// Exists checks if the ReferralcodeRejectionReason row exists.
func (o *ReferralcodeRejectionReason) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ReferralcodeRejectionReasonExists(ctx, exec, o.RejectionCode)
}
